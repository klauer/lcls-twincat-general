<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_Logger" Id="{227c1bce-209d-4aad-8160-124282bb6370}" SpecialFunc="None">
    <Declaration><![CDATA[(* Syslog Logger
A. Wallace 2016-9-3

This is used to pass PLC notification messeges to a syslog server.

This POU constantly attempts to send out messages from the global buffer: GVL_Logger.fbLoggerBuffer.
This buffer is filled by calling fbLogMessage.

NOTE: FB_Logger must integrated into your project manually. It is recommended that you add it to its own 
task.
*)
FUNCTION_BLOCK FB_Logger
VAR_INPUT
	i_xReset			:	BOOL := FALSE; //Closes the socket and attempts to open another
END_VAR
VAR
	fbUDPSocket	        :	FB_ConnectionlessSocket; //Handles creation/deletion of the UDP socket
	fbUDPSocketSend		:	FB_SocketUdpSendTo; //FB for sending the sOutgoingMesg
	sOutgoingMesg		:	T_MaxString; //Outgoing message holder
	stDiag				:	ST_FbDiagnostics; //Generic FB diagnostics, check here for insight into errors/ other FB events
	{attribute 'naming' := 'omit'}
	rtReset				:	R_TRIG; //Reset sensor
	fbGetSystemTime		:	FB_LocalSystemTime := (bEnable := TRUE); //Acquires system time as message is being sent
	fbGetHostName		:	FB_GetHostName := (bExecute := TRUE, sNetID := ''); //Acquires name of the PLC
	{attribute 'naming' := 'omit'}
	ctuSentSomething	:	CTU := (PV := 100); //Diagnostic to indicate this thing is working. Increments with each successful send.
	{attribute 'naming' := 'omit'}
	rtSocketSendErr		:	R_TRIG; //Socket send error sensor
END_VAR
VAR CONSTANT
	cPSLogHost	: T_IPv4Addr := '172.21.148.141'; //syslog host
	cnUdpSyslog	:	UDINT := 5000; //syslog port
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbLoggerBuffer.pBuffer := ADR(asLoggerMesgBuffer); 
fbLoggerBuffer.cbBuffer:= UINT_TO_UDINT(SIZEOF(asLoggerMesgBuffer));

fbGetSystemTime(); 
IF fbGetSystemTime.bValid THEN
	gsCurrentTime := SYSTEM_TIME_TO_RFC3339(fbGetSystemTime.systemTime);
ELSE
	gsCurrentTime := csNILVALUE;
END_IF

fbGetHostName();
IF NOT (fbGetHostName.bBusy OR fbGetHostName.bError) THEN
	gsHostName := fbGetHostName.sHostName;
ELSE
	gsHostName := csNILVALUE;
END_IF

rtReset(CLK:=i_xReset);
IF (rtReset.Q AND fbUDPSocket.bEnable) OR fbUDPSocket.bError THEN
	fbUDPSocket(bEnable := FALSE);
END_IF

fbUDPSocket(
	nLocalPort := 0,
	bEnable := TRUE,
	nMode := CONNECT_MODE_ENABLEDBG,
);

IF fbUDPSocketSend.bBusy THEN
	fbUDPSocketSend();
	fbUDPSocketSend.bExecute R= fbUDPSocketSend.bBusy;
ELSIF fbUDPSocket.eState = E_SocketConnectionlessState.eSOCKET_CREATED THEN
	IF fbLoggerBuffer.nCount > 0 THEN
		fbLoggerBuffer.A_RemoveHead(getValue=>sOutgoingMesg);
		fbUDPSocketSend.bExecute := TRUE;
		IF sOutgoingMesg <> '' THEN
			ctuSentSomething(CU:=TRUE);
			fbUDPSocketSend.pSrc := ADR(sOutgoingMesg);
			fbUDPSocketSend.cbLen := UINT_TO_UDINT(SIZEOF(sOutgoingMesg));
		END_IF
	END_IF
	
	fbUDPSocketSend(
		hSocket := fbUDPSocket.hSocket,
		sRemoteHost := cPSLogHost,
		nRemotePort := cnUdpSyslog,
	);
	fbUDPSocketSend.bExecute R= fbUDPSocketSend.bBusy;
	rtSocketSendErr(CLK:=fbUDPSocketSend.bError);
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>